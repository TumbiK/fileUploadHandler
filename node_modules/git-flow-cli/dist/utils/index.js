"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const util_1 = require("util");
const os_1 = require("os");
const tty_1 = require("tty");
const fs_1 = require("fs");
const manifest = require('../../package.json');
exports.childProcessAsync = {
    execAsync: util_1.promisify(child_process_1.exec),
};
function runCommand(command, opts) {
    return new Promise(resolve => {
        const options = Object.assign({ pipe: true }, opts);
        const splits = command.split(' ');
        const stream = child_process_1.spawn(splits[0], splits.slice(1), {
            stdio: options.pipe ? 'pipe' : 'ignore',
        });
        if (options.pipe) {
            stream.stdout.pipe(process.stdout);
            stream.stderr.pipe(process.stderr);
        }
        stream.on('exit', code => {
            resolve(code);
        });
    });
}
exports.runCommand = runCommand;
async function getGitTopLevelPath() {
    const { stdout } = await exports.childProcessAsync.execAsync('git rev-parse --show-toplevel');
    return stdout.replace(/\n/g, '');
}
exports.getGitTopLevelPath = getGitTopLevelPath;
async function getCurrentGitBranch() {
    const { stdout } = await exports.childProcessAsync.execAsync('git symbolic-ref --short -q HEAD');
    return stdout.replace(/\n/g, '');
}
exports.getCurrentGitBranch = getCurrentGitBranch;
function getTalker(fd, color) {
    return tty_1.isatty(fd) ?
        `\u001b[38;5;${color}m${manifest.name}: \u001b[39;0m` :
        `${manifest.name}: `;
}
function writeStdout(message, color) {
    process.stdout.write(`${getTalker(process.stdout.fd, color)}${message}${os_1.EOL}`);
}
function writeStderr(message, color) {
    process.stderr.write(`${getTalker(process.stderr.fd, color)}${message}${os_1.EOL}`);
}
class Logger {
    info(...args) {
        writeStdout(args.join(' '), 87);
    }
    warn(...args) {
        writeStderr(args.join(' '), 11);
    }
    error(...args) {
        writeStderr(args.join(' '), 1);
    }
}
exports.Logger = Logger;
exports.logger = new Logger();
exports.fsAsync = {
    access: util_1.promisify(fs_1.access),
    lstat: util_1.promisify(fs_1.lstat),
    writeFile: util_1.promisify(fs_1.writeFile),
    readFile: util_1.promisify(fs_1.readFile),
    appendFile: util_1.promisify(fs_1.appendFile),
    rename: util_1.promisify(fs_1.rename),
    unlink: util_1.promisify(fs_1.unlink),
};
function formatDateNum(num) {
    return (num < 10 ? '0' : '') + num;
}
function getCurrentDate() {
    const now = new Date();
    const year = formatDateNum(now.getFullYear());
    const month = formatDateNum(now.getMonth() + 1);
    const date = formatDateNum(now.getDate());
    return `${year}${month}${date}`;
}
exports.getCurrentDate = getCurrentDate;
