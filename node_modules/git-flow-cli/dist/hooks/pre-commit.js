"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const path = require("path");
const utils_1 = require("../utils");
class PreCommitHook extends base_1.default {
    constructor() {
        super('pre-commit');
    }
    async runDefaultCheck() {
        const branch = await utils_1.getCurrentGitBranch();
        const invalid = /^(master|staging|qa|release|develop)/.test(branch);
        if (invalid) {
            utils_1.logger.error(`branch ${branch} is forbidden to apply commit.`);
        }
        return !invalid;
    }
    async getDefaultCommands() {
        try {
            const commands = [];
            const topLevelPath = await utils_1.getGitTopLevelPath();
            const manifest = require(path.resolve(topLevelPath, 'package.json'));
            if (manifest.scripts) {
                Object.keys(manifest.scripts).forEach(script => {
                    const content = manifest.scripts[script];
                    if (/(t|e)slint/.test(content) && !content.includes('fix')) {
                        commands.push(`npm run ${script}`);
                    }
                });
            }
            return commands;
        }
        catch (err) {
            return [];
        }
    }
    getFailureMessage(command) {
        return [
            `your commit had been broken by the following command:`,
            '',
            `  ${command}`,
            '',
            'please check your commit. dangerously you could use -n(--no-verify) to skip.',
        ];
    }
}
new PreCommitHook();
