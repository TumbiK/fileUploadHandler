"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const utils_1 = require("../utils");
class BaseHook {
    constructor(name) {
        this.name = name;
        this.start();
    }
    async start() {
        utils_1.logger.info(`${this.name} check start.`);
        const defaultCheckResult = await this.runDefaultCheck();
        if (!defaultCheckResult) {
            const code = 1;
            this.displayFailureMessage(`default ${this.name} check`, code);
            return process.exit(code);
        }
        const commands = await this.getCommands();
        if (commands.length === 0) {
            utils_1.logger.warn(this.name, 'has been skipped since there is no config.');
            utils_1.logger.warn('');
            return process.exit(0);
        }
        for (const command of commands) {
            utils_1.logger.info(this.name, `\`${command}\`.`);
            const code = await utils_1.runCommand(command);
            utils_1.logger.info(this.name, `\`${command}\` command exit with code ${code}.`);
            if (code !== 0) {
                this.displayFailureMessage(command, code);
                return process.exit(code);
            }
        }
    }
    async getCommands() {
        const topLevelPath = await utils_1.getGitTopLevelPath();
        let commands = [];
        try {
            const configs = require(path.resolve(topLevelPath, 'gitflow'));
            const config = configs[this.name];
            commands = typeof config === 'string' ? [config] : config;
        }
        catch (err) { }
        if (!Array.isArray(commands) || commands.length === 0) {
            utils_1.logger.info(this.name, 'config is empty.');
            utils_1.logger.info(this.name, 'try to generate default commands.');
            commands = await this.getDefaultCommands();
            if (commands.length === 0) {
                [
                    `${this.name} fail to generate default commands. please set config in your {project_root}/gitflow.js(on) like:`,
                    '',
                    '{',
                    `  "${this.name}": [ "npm run lint" ]`,
                    '}',
                    '',
                ].forEach(msg => utils_1.logger.warn(msg));
                return [];
            }
        }
        utils_1.logger.info(this.name, 'load as', `[ ${commands.map(command => `"${command}"`).join(', ')} ].`);
        return commands;
    }
    displayFailureMessage(command, code) {
        const messages = this.getFailureMessage(command, code);
        messages.forEach(msg => utils_1.logger.error(msg));
    }
}
exports.default = BaseHook;
