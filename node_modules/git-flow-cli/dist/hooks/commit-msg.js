"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const utils_1 = require("../utils");
const os_1 = require("os");
class CommitMessageHook extends base_1.default {
    constructor() {
        super('commit-msg');
    }
    async runDefaultCheck() {
        const commitMsgFile = process.argv[2];
        const msg = (await utils_1.fsAsync.readFile(commitMsgFile)).toString('utf8');
        const lines = msg.split(os_1.EOL);
        for (const line of lines) {
            if (/^\s*$/.test(line)) {
                continue;
            }
            const types = ['feature', 'fix', 'docs', 'style', 'refactor', 'test', 'chore'];
            if (new RegExp(`^(${types.join('|')})(\(.*\))?:.*$`).test(line)) {
                return true;
            }
            else {
                utils_1.logger.error(`commit message header must be similar to <type>(<scope>): <subject>, where type in [${types.join(', ')}].`);
                return false;
            }
        }
        utils_1.logger.error('valid commit message is not found.');
        return false;
    }
    async getDefaultCommands() {
        return [];
    }
    getFailureMessage(command) {
        return [
            `your commit had been broken by the following command:`,
            '',
            `  ${command}`,
            '',
            'please check your commit. dangerously you could use -n(--no-verify) to skip.',
        ];
    }
}
new CommitMessageHook();
