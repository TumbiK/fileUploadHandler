"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_1 = require("fs");
const util_1 = require("util");
const utils_1 = require("../utils");
const common_1 = require("./common");
async function postInstall() {
    const gitFolderPath = await common_1.getGitFolderPath();
    if (gitFolderPath === null) {
        return;
    }
    for (const hook of common_1.hooks) {
        const customHookName = `${hook}.git-flow`;
        const hookPath = path.resolve(gitFolderPath, 'hooks', hook);
        const customHookPath = path.resolve(gitFolderPath, 'hooks', customHookName);
        utils_1.logger.info(`write ${customHookName}`);
        const content = util_1.format(common_1.customHookTpl, path.join(__dirname, '../hooks', hook));
        await utils_1.fsAsync.writeFile(customHookPath, content, { mode: '755' });
        try {
            await utils_1.fsAsync.access(hookPath, fs_1.constants.W_OK);
        }
        catch (err) {
            utils_1.logger.info(`write ${hook}`);
            await utils_1.fsAsync.writeFile(hookPath, util_1.format(common_1.writeNewHookTpl, customHookPath), { mode: '755' });
            continue;
        }
        const writeIntoHookContent = util_1.format(common_1.writeIntoHookTpl, customHookPath);
        const hookContent = (await utils_1.fsAsync.readFile(hookPath)).toString('utf8');
        if (hookContent.match(common_1.writeIntoHookRegExp)) {
            utils_1.logger.info(`rewrite ${hook}`);
            await utils_1.fsAsync.writeFile(hookPath, hookContent.replace(common_1.writeIntoHookRegExp, writeIntoHookContent));
        }
        else {
            utils_1.logger.info(`append ${hook}`);
            await utils_1.fsAsync.appendFile(hookPath, writeIntoHookContent);
        }
    }
}
postInstall();
